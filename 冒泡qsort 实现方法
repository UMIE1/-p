int cmp_int(const void*e1,const void*e2) {
	return *(int*)e1 - *(int*)e2;
}
void swap(char*e1,char*e2,int width) {
	for (int i = 0; i < width; i++) {
		char temp = *e1;
		*e1 = *e2;
		*e2 = temp;
		e1++;
		e2++;
		//一次只改了一个字节，改完width次后，完成交换
	}
}
void bubble_sort(void*base,int len,int width,int (*cmp)(const void*e1,const void*e2)) {
	//冒泡排序
	for (int i = 0; i < len - 1; i++) {
		for (int j = 0; j < len - i - 1; j++) {
			if (cmp((char*)base+(j*width),(char*)base+((j+1)*width))> 0) {
				swap((char*)base + (j * width), (char*)base + ((j + 1) * width),width);
			}
		}
	}
}
void test1() {
	int arr[] = { 9,8,7,6,5,4,3,2,1,0 };
	int len = sizeof(arr) / sizeof(arr[0]);
	//bubble_sort函数的实现
	//bubble_sort函数所需要的参数，（数组首元素的地址，数组的大小，数组元素的大小，需要自己写的比较函数）
	bubble_sort(arr,len,sizeof(arr[0]),cmp_int);
	for (int i = 0; i < len; i++) {
		printf("%d ", arr[i]);
	}
}
int main() {
	test1();
	return 0;
}
